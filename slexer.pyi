from _typeshed import Incomplete
from collections.abc import Generator

class State:
    state: Incomplete
    def __init__(self, initialParserClass) -> None: ...
    def parser(self): ...
    def parsers(self): ...
    def tokens(self, text, pos: int = ...) -> Generator[Incomplete, None, None]: ...
    def enter(self, parser) -> None: ...
    def leave(self) -> None: ...
    def replace(self, parser) -> None: ...
    def depth(self): ...
    def follow(self, token) -> None: ...
    def freeze(self): ...
    @classmethod
    def thaw(cls, frozen): ...

class Token(str):
    rx: Incomplete
    @classmethod
    def test_match(cls, match): ...
    def __new__(cls, string, pos): ...
    def update_state(self, state) -> None: ...

class PatternProperty:
    def __get__(self, instance, owner): ...

class ParserMeta(type):
    def __new__(cls, name, bases, attrd): ...

class Parser:
    re_flags: int
    default: Incomplete
    items: Incomplete
    def parse(self, text, pos): ...
    def token(self, match): ...
    def freeze(self): ...
    @classmethod
    def thaw(cls, attrs): ...
    def fallthrough(self, state): ...
    def update_state(self, state, token) -> None: ...

class FallthroughParser(Parser):
    def parse(self, text, pos): ...
    def fallthrough(self, state) -> None: ...

class Fridge:
    def __init__(self, stateClass=...) -> None: ...
    def freeze(self, state): ...
    def thaw(self, num): ...
    def count(self): ...
