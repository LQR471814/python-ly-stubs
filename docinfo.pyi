from _typeshed import Incomplete
from collections.abc import Generator

class DocInfo:
    tokens: Incomplete
    classes: Incomplete
    def __init__(self, doc): ...
    @property
    def document(self): ...
    def range(self, start: int = ..., end: Incomplete | None = ...): ...
    def mode(self): ...
    def find(self, token: Incomplete | None = ..., cls: Incomplete | None = ..., pos: int = ..., endpos: int = ...): ...
    def find_all(self, token: Incomplete | None = ..., cls: Incomplete | None = ..., pos: int = ..., endpos: int = ...) -> Generator[Incomplete, None, None]: ...
    def version_string(self): ...
    def version(self): ...
    def include_args(self): ...
    def scheme_load_args(self): ...
    def output_args(self): ...
    def definitions(self): ...
    def markup_definitions(self): ...
    def language(self): ...
    def global_staff_size(self): ...
    def token_hash(self): ...
    def complete(self): ...
    def has_output(self): ...
    def count_tokens(self, cls): ...
    def counted_tokens(self): ...
