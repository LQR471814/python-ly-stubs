from _typeshed import SupportsRichComparison
from typing import Any, Callable, Literal, Type, TypeVar
from collections.abc import Iterator

N = TypeVar("N", bound=Node)

CLS = Type[N] | tuple[Type[Node], ...]

class Node:
    def __init__(self, parent: Node | None = ...) -> None: ...
    def parent(self) -> Node | None: ...
    def index(self, node: Node) -> int: ...
    def append(self, node: Node) -> None: ...
    def extend(self, iterable) -> None: ...
    def insert(self, index: int, node: Node) -> None: ...
    def insert_before(self, other, node: Node) -> None: ...
    def remove(self, node: Node) -> None: ...

    # * I have no idea where the code for this is, it just works
    def __iter__(self) -> Iterator[Node]: ...
    def __next__(self) -> Node: ...

    def __bool__(self) -> Literal[True]: ...
    def __len__(self) -> int: ...
    def __getitem__(self, k: int | slice) -> Node: ...
    def __setitem__(self, k: int | slice, obj: Node) -> None: ...
    def __delitem__(self, k: int | slice) -> None: ...
    def __contains__(self, node: Node) -> bool: ...
    def clear(self) -> None: ...
    def unlink(self) -> None: ...
    def replace(self, old: Node, new: Node) -> None: ...
    def sort(self, key: Callable[[Any], SupportsRichComparison] | None = ..., reverse: bool = ...) -> None: ...
    def copy(self) -> Node: ...
    def ancestors(self) -> Iterator[Node]: ...
    def previous_sibling(self) -> Node | None: ...
    def next_sibling(self) -> Node | None: ...
    def backward(self) -> Iterator[Node] | None: ...
    def forward(self) -> Iterator[Node] | None: ...
    def is_descendant_of(self, parent: Node) -> bool: ...
    def toplevel(self) -> Node: ...
    def descendants(self, depth: int = ...) -> Iterator[Node]: ...
    def iter_depth(self, depth: int = ...) -> Iterator[Node]: ...
    def iter_rings(self, depth: int = ...) -> Iterator[Node]: ...
    def find(self, cls: CLS, depth: int = ...) -> Iterator[N]: ...
    def find_children(self, cls: CLS, depth: int = ...) -> Iterator[N]: ...
    def find_child(self, cls: CLS, depth: int = ...) -> N | None: ...
    def find_parent(self, cls: CLS) -> N | None: ...
    def dump(self) -> str: ...

class WeakNode(Node):
    def parent(self) -> Node | None: ...
