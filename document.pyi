from _typeshed import Incomplete
from collections.abc import Generator

class DocumentBase:
    filename: Incomplete
    encoding: Incomplete
    def __init__(self) -> None: ...
    def __bool__(self): ...
    __nonzero__: Incomplete
    def __iter__(self): ...
    def __len__(self) -> None: ...
    def __getitem__(self, index) -> None: ...
    def plaintext(self): ...
    def setplaintext(self, text) -> None: ...
    def size(self): ...
    def block(self, position) -> None: ...
    def index(self, block) -> None: ...
    def blocks_forward(self, block) -> Generator[Incomplete, None, None]: ...
    def blocks_backward(self, block) -> Generator[Incomplete, None, None]: ...
    def position(self, block) -> None: ...
    def text(self, block) -> None: ...
    def next_block(self, block): ...
    def previous_block(self, block): ...
    def isvalid(self, block) -> None: ...
    def isblank(self, block): ...
    def __enter__(self): ...
    def __exit__(self, exc_type, exc_val, exc_tb) -> None: ...
    def check_changes(self) -> None: ...
    def update_cursors(self) -> None: ...
    def apply_changes(self) -> None: ...
    def tokens(self, block) -> None: ...
    def tokens_with_position(self, block): ...
    def initial_state(self) -> None: ...
    def state(self, block): ...
    def state_end(self, block) -> None: ...
    def __setitem__(self, key, text) -> None: ...
    def __delitem__(self, key) -> None: ...

class Document(DocumentBase):
    modified: bool
    def __init__(self, text: str = ..., mode: Incomplete | None = ...) -> None: ...
    @classmethod
    def load(cls, filename, encoding: str = ..., mode: Incomplete | None = ...): ...
    def copy(self): ...
    def __len__(self): ...
    def __getitem__(self, index): ...
    def setmode(self, mode) -> None: ...
    def mode(self): ...
    def setplaintext(self, text) -> None: ...
    def initial_state(self): ...
    def state_end(self, block): ...
    def block(self, position): ...
    def index(self, block): ...
    def position(self, block): ...
    def text(self, block): ...
    def isvalid(self, block): ...
    def tokens(self, block): ...
    def apply_changes(self) -> None: ...

class _Block:
    position: Incomplete
    state: Incomplete
    tokens: Incomplete
    text: Incomplete
    index: Incomplete
    def __init__(self, text: str = ..., index: int = ...) -> None: ...

class Cursor:
    start: Incomplete
    end: Incomplete
    def __init__(self, doc, start: int = ..., end: Incomplete | None = ...) -> None: ...
    @property
    def document(self): ...
    def start_block(self): ...
    def end_block(self): ...
    def blocks(self) -> Generator[Incomplete, None, None]: ...
    def text(self): ...
    def text_before(self): ...
    def text_after(self): ...
    def has_selection(self): ...
    def select_all(self) -> None: ...
    def select_end_of_block(self) -> None: ...
    def select_start_of_block(self) -> None: ...
    def lstrip(self, chars: Incomplete | None = ...) -> None: ...
    def rstrip(self, chars: Incomplete | None = ...) -> None: ...
    def strip(self, chars: Incomplete | None = ...) -> None: ...

class Runner:
    def __init__(self, doc, tokens_with_position: bool = ...) -> None: ...
    @classmethod
    def at(cls, cursor, after_token: bool = ..., tokens_with_position: bool = ...): ...
    @property
    def document(self): ...
    def set_position(self, position, after_token: bool = ...) -> None: ...
    block: Incomplete
    def move_to_block(self, block, at_end: bool = ...): ...
    def next(self, current_block: bool = ...): ...
    def previous(self, current_block: bool = ...): ...
    def forward_line(self) -> Generator[Incomplete, None, None]: ...
    def forward(self) -> Generator[Incomplete, None, None]: ...
    def backward_line(self) -> Generator[Incomplete, None, None]: ...
    def backward(self) -> Generator[Incomplete, None, None]: ...
    def previous_block(self, at_end: bool = ...): ...
    def next_block(self, at_end: bool = ...): ...
    def token(self): ...
    def position(self): ...
    def copy(self): ...

OUTSIDE: int
PARTIAL: int
INSIDE: int

class Source:
    state: Incomplete
    def __init__(self, cursor, state: Incomplete | None = ..., partial=..., tokens_with_position: bool = ...): ...
    def __iter__(self): ...
    def __next__(self): ...
    next: Incomplete
    def pushback(self, pushback: bool = ...) -> None: ...
    def token(self): ...
    @property
    def document(self): ...
    def position(self, token): ...
    def until_parser_end(self) -> Generator[Incomplete, None, None]: ...
    def consume(self, iterable, position): ...
