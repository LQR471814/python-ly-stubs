from _typeshed import Incomplete
from collections.abc import Generator
from typing import NamedTuple

class style(NamedTuple):
    name: Incomplete
    base: Incomplete
    classes: Incomplete

class css_class(NamedTuple):
    mode: Incomplete
    name: Incomplete
    base: Incomplete

class Mapper(dict):
    def __getitem__(self, token): ...

def default_mapping(): ...

default_scheme: Incomplete

def get_tokens(cursor): ...
def map_tokens(cursor, mapper) -> Generator[Incomplete, None, None]: ...
def melt_mapped_tokens(mapped_tokens) -> Generator[Incomplete, None, None]: ...
def css_mapper(mapping: Incomplete | None = ...): ...
def css_dict(css_style, scheme=...): ...
def css_item(i): ...
def css_attr(d): ...
def css_group(selector, d): ...
def format_css_span_class(css_style): ...

class css_style_attribute_formatter:
    scheme: Incomplete
    def __init__(self, scheme=...) -> None: ...
    def __call__(self, css_style): ...

def format_stylesheet(scheme=...): ...
def html_escape(text): ...
def html_escape_attr(text): ...
def html_format_attrs(d): ...
def html(cursor, mapper, span=...): ...
def add_line_numbers(cursor, html, linenum_attrs: Incomplete | None = ..., document_attrs: Incomplete | None = ...): ...
def format_html_document(body, title: str = ..., stylesheet: Incomplete | None = ..., stylesheet_ref: Incomplete | None = ..., encoding: str = ...): ...

class HtmlWriter:
    fgcolor: Incomplete
    bgcolor: Incomplete
    linenumbers_fgcolor: Incomplete
    linenumbers_bgcolor: str
    inline_style: bool
    number_lines: bool
    wrapper_tag: str
    wrapper_attribute: str
    document_id: str
    linenumbers_id: str
    title: str
    css_scheme: Incomplete
    css_mapper: Incomplete
    encoding: str
    stylesheet_ref: Incomplete
    full_html: bool
    def set_wrapper_attribute(self, attr) -> None: ...
    def set_wrapper_tag(self, tag) -> None: ...
    def html(self, cursor): ...
