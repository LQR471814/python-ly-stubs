from .items import *
from _typeshed import Incomplete
from collections.abc import Generator
from ly import lex as lex
from ly.lex import lilypond as lilypond, scheme as scheme, Token as LexToken

def skip(source, what=...) -> Generator[Incomplete, None, None]: ...

class dispatcher:
    d: Incomplete
    def __init__(self) -> None: ...
    def read_arg(self, a): ...
    def __call__(self, *args): ...
    def method(self, token): ...

class dispatcher_class(dispatcher):
    def read_arg(self, a): ...
    def method(self, token): ...

class Reader:
    source: Incomplete
    language: str
    in_chord: bool
    prev_duration: Incomplete
    def __init__(self, source) -> None: ...
    def set_language(self, lang): ...
    def add_duration(self, item, token: LexToken | None = ..., source: Incomplete | None = ...) -> None: ...
    def consume(self, last_token: LexToken | None = ...) -> Generator[Incomplete, None, None]: ...
    def factory(self, cls, token: LexToken | None = ..., consume: bool = ..., position: Incomplete | None = ...): ...
    def add_bracketed(self, item, source): ...
    def read(self, source: Incomplete | None = ...) -> Generator[Incomplete, None, None]: ...
    def read_item(self, t, source: Incomplete | None = ...): ...
    def handle_scheme_start(self, t, source: Incomplete | None = ...): ...
    def handle_string_start(self, t, source: Incomplete | None = ...): ...
    def handle_number_class(self, t, source: Incomplete | None = ...): ...
    def handle_music_item(self, t, source): ...
    def handle_length(self, t, source): ...
    def handle_chord_start(self, t, source): ...
    def handle_music_list(self, t, source): ...
    def read_command(self, t, source): ...
    def read_keyword(self, t, source): ...
    def read_user_command(self, t, source): ...
    def read_chord_specifier(self, t, source: Incomplete | None = ...): ...
    def read_tremolo(self, t, source: Incomplete | None = ...): ...
    def handle_name(self, t, source): ...
    def handle_variable_assignment(self, t, source): ...
    def handle_direct_items(self, t, source): ...
    def handle_direction(self, t, source): ...
    def handle_slurs(self, t, source: Incomplete | None = ...): ...
    def handle_beam(self, t, source: Incomplete | None = ...): ...
    def handle_articulation(self, t, source: Incomplete | None = ...): ...
    def read_assignment(self, t): ...
    def test_music_list(self, t): ...
    def read_music_item(self, t, source): ...
    def handle_relative(self, t, source): ...
    def handle_absolute(self, t, source): ...
    def handle_transpose(self, t, source): ...
    def handle_clef(self, t, source): ...
    def handle_key(self, t, source): ...
    def handle_scaler(self, t, source): ...
    def handle_tag(self, t, source): ...
    def handle_grace(self, t, source): ...
    def handle_after_grace(self, t, source): ...
    def handle_repeat(self, t, source): ...
    def handle_alternative(self, t, source): ...
    def handle_tempo(self, t, source): ...
    def handle_time(self, t, source): ...
    def handle_partial(self, t, source): ...
    def handle_translator(self, t, source): ...
    def handle_inputmode(self, t, source): ...
    def handle_lyricmode(self, t, source): ...
    def read_lyric_item(self, t): ...
    def handle_string_tuning(self, t, source): ...
    def handle_partcombine(self, t, source: Incomplete | None = ...): ...
    def handle_language(self, t, source): ...
    def handle_include(self, t, source): ...
    def handle_version(self, t, source): ...
    def handle_bracketed(self, t, source): ...
    def handle_set(self, t, source): ...
    def handle_unset(self, t, source): ...
    def handle_override(self, t, source): ...
    def handle_revert(self, t, source): ...
    def handle_tweak(self, t, source): ...
    def handle_markup(self, t, source: Incomplete | None = ...): ...
    def read_markup(self, t): ...
    def handle_markup_score(self, t): ...
    def handle_markup_command(self, t): ...
    def handle_markup_user_command(self, t): ...
    def handle_markup_open_bracket(self, t): ...
    def handle_markup_word(self, t): ...
    def add_markup_arguments(self, item): ...
    def read_scheme_item(self, t): ...
    def read_scheme(self, t): ...
    def handle_scheme_quote(self, t): ...
    def handle_scheme_open_parenthesis(self, t): ...
    def handle_scheme_token(self, t): ...
    def handle_scheme_lilypond_start(self, t): ...
