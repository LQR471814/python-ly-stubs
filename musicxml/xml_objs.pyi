from _typeshed import Incomplete

class IterateXmlObjs:
    musxml: Incomplete
    divisions: Incomplete
    def __init__(self, score, musxml, div) -> None: ...
    def iterate_partgroup(self, group) -> None: ...
    def iterate_part(self, part) -> None: ...
    def iterate_bar(self, bar) -> None: ...
    def new_xml_bar_attr(self, obj) -> None: ...
    def before_note(self, obj) -> None: ...
    def after_note(self, obj) -> None: ...
    def gener_xml_mus(self, obj) -> None: ...
    def new_xml_note(self, obj) -> None: ...
    def new_xml_rest(self, obj) -> None: ...
    def count_duration(self, base_scaling, divs): ...

class Score:
    partlist: Incomplete
    title: Incomplete
    creators: Incomplete
    info: Incomplete
    rights: Incomplete
    glob_section: Incomplete
    def __init__(self) -> None: ...
    def add_right(self, value, type) -> None: ...
    def is_empty(self): ...
    def merge_globally(self, section, override: bool = ...) -> None: ...
    def debug_score(self, attr=...) -> None: ...

class ScorePartGroup:
    bracket: Incomplete
    partlist: Incomplete
    name: str
    abbr: str
    parent: Incomplete
    num: Incomplete
    def __init__(self, num, bracket) -> None: ...
    def set_bracket(self, bracket) -> None: ...
    def merge_voice(self, voice, override: bool = ...) -> None: ...

class SlurCount:
    count: int
    def __init__(self) -> None: ...
    def inc(self) -> None: ...
    def dec(self) -> None: ...

class ScoreSection:
    name: Incomplete
    barlist: Incomplete
    glob: Incomplete
    active_slur_count: Incomplete
    def __init__(self, name, glob: bool = ...) -> None: ...
    def merge_voice(self, voice, override: bool = ...) -> None: ...
    def merge_lyrics(self, lyrics) -> None: ...

class Snippet(ScoreSection):
    merge_barlist: Incomplete
    def __init__(self, name, merge_into) -> None: ...

class LyricsSection(ScoreSection):
    voice_id: Incomplete
    def __init__(self, name, voice_id) -> None: ...

class ScorePart(ScoreSection):
    part_id: Incomplete
    to_part: Incomplete
    abbr: str
    midi: str
    staves: Incomplete
    def __init__(self, staves: int = ..., part_id: Incomplete | None = ..., to_part: Incomplete | None = ..., name: str = ...) -> None: ...
    def set_first_bar(self, divisions): ...
    def merge_part_to_part(self) -> None: ...
    def extract_global_to_section(self, name): ...

class Bar:
    obj_list: Incomplete
    pickup: bool
    list_full: bool
    def __init__(self) -> None: ...
    def add(self, obj) -> None: ...
    def has_music(self): ...
    def has_attr(self): ...
    def create_backup(self) -> None: ...
    def is_skip(self, obj_list: Incomplete | None = ...): ...
    def inject_voice(self, new_voice, override: bool = ..., active_slur_count: Incomplete | None = ...) -> None: ...

class BarMus:
    duration: Incomplete
    type: Incomplete
    tuplet: Incomplete
    dot: int
    voice: Incomplete
    staff: int
    chord: bool
    other_notation: Incomplete
    dynamic: Incomplete
    oct_shift: Incomplete
    def __init__(self, duration, voice: int = ...) -> None: ...
    def set_tuplet(self, fraction, ttype, nr, acttype: str = ..., normtype: str = ...) -> None: ...
    def set_staff(self, staff) -> None: ...
    def add_dot(self) -> None: ...
    def add_other_notation(self, other) -> None: ...
    def set_dynamics_mark(self, sign, before: bool = ...) -> None: ...
    def set_dynamics_wedge(self, sign, before: bool = ...) -> None: ...
    def set_dynamics_text(self, sign, before: bool = ...) -> None: ...
    def set_dynamics_dashes(self, sign, before: bool = ...) -> None: ...
    def set_oct_shift(self, plac, octdir, size) -> None: ...
    def has_attr(self): ...

class OctaveShift:
    plac: Incomplete
    octdir: Incomplete
    size: Incomplete
    def __init__(self, plac, octdir, size) -> None: ...

class Dynamics:
    before: Incomplete
    sign: Incomplete
    def __init__(self, sign, before: bool = ...) -> None: ...

class DynamicsMark(Dynamics): ...
class DynamicsWedge(Dynamics): ...
class DynamicsText(Dynamics): ...
class DynamicsDashes(Dynamics): ...

class Tuplet:
    fraction: Incomplete
    ttype: Incomplete
    nr: Incomplete
    acttype: Incomplete
    normtype: Incomplete
    def __init__(self, fraction, ttype, nr, acttype, normtype) -> None: ...

class Slur:
    nr: Incomplete
    slurtype: Incomplete
    phrasing: Incomplete
    start_node: Incomplete
    def __init__(self, nr, slurtype, phrasing: bool = ..., start_node: Incomplete | None = ...) -> None: ...

class BarNote(BarMus):
    base_note: Incomplete
    alter: Incomplete
    octave: Incomplete
    accidental_token: Incomplete
    tie: Incomplete
    grace: Incomplete
    gliss: Incomplete
    tremolo: Incomplete
    skip: bool
    slur: Incomplete
    artic: Incomplete
    ornament: Incomplete
    adv_ornament: Incomplete
    fingering: Incomplete
    lyric: Incomplete
    stem_direction: Incomplete
    def __init__(self, pitch_note, alter, accidental, duration, voice: int = ...) -> None: ...
    duration: Incomplete
    dot: int
    type: Incomplete
    def set_duration(self, duration, durtype: str = ...) -> None: ...
    def set_durtype(self, durtype) -> None: ...
    def set_octave(self, octave) -> None: ...
    def set_tie(self, tie_type) -> None: ...
    def set_slur(self, nr, slur_type, phrasing: bool = ..., slur_start_node: Incomplete | None = ...) -> None: ...
    def add_articulation(self, art_name) -> None: ...
    def add_ornament(self, ornament) -> None: ...
    def add_adv_ornament(self, ornament, end_type: str = ...) -> None: ...
    def set_grace(self, slash) -> None: ...
    def set_gliss(self, line, endtype: str = ..., nr: int = ...) -> None: ...
    def set_tremolo(self, trem_type, duration: bool = ...) -> None: ...
    def set_stem_direction(self, direction) -> None: ...
    def add_fingering(self, finger_nr) -> None: ...
    def add_lyric(self, lyric_list) -> None: ...
    def change_lyric_syll(self, index, syll) -> None: ...
    def change_lyric_nr(self, index, nr) -> None: ...

class Unpitched(BarNote):
    octave: int
    base_note: Incomplete
    def __init__(self, duration, step: Incomplete | None = ..., voice: int = ...) -> None: ...

class BarRest(BarMus):
    show_type: Incomplete
    type: Incomplete
    skip: Incomplete
    pos: Incomplete
    def __init__(self, duration, voice: int = ..., show_type: bool = ..., skip: bool = ..., pos: int = ...) -> None: ...
    duration: Incomplete
    def set_duration(self, duration, durtype: str = ...) -> None: ...
    def set_durtype(self, durtype) -> None: ...

class BarAttr:
    key: Incomplete
    time: int
    clef: int
    mode: str
    divs: int
    barline: Incomplete
    repeat: Incomplete
    staves: int
    multiclef: Incomplete
    tempo: Incomplete
    multirest: Incomplete
    mark: Incomplete
    word: Incomplete
    new_system: Incomplete
    def __init__(self) -> None: ...
    def add_break(self, force_break) -> None: ...
    def set_key(self, muskey, mode) -> None: ...
    def set_time(self, fractlist, numeric: bool = ...) -> None: ...
    def set_clef(self, clef) -> None: ...
    def set_barline(self, bl) -> None: ...
    def set_tempo(self, unit: int = ..., unittype: str = ..., beats: int = ..., dots: int = ..., text: str = ...) -> None: ...
    def set_multp_rest(self, size: int = ...) -> None: ...
    def set_mark(self, mark) -> None: ...
    def set_word(self, words) -> None: ...
    def has_attr(self): ...
    def merge_attr(self, barattr, override: bool = ...) -> None: ...

class BarBackup:
    duration: Incomplete
    def __init__(self, duration) -> None: ...

class TempoDir:
    metr: Incomplete
    midi: Incomplete
    dots: Incomplete
    text: Incomplete
    def __init__(self, unit, unittype, beats, dots, text) -> None: ...
    def set_midi_tempo(self, unit, beats, dots): ...

def dur2lines(dur): ...
def convert_barl(bl): ...
